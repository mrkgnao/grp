module Group where

-- | The main group datatype.
--
-- A group is, in this representation, determined by its order, a list of
-- elements, and a list of ordered sublists of its elements, referred to as
-- "words", which make up its presentation.
--
-- FIXME: This representation is subject to change.

data Group a = Group Int [a] (Pres a) deriving (Show,Eq)

-- | A presentation is a list of words.
type Pres  a = [GWord a]

-- | A word is just a list of GElems, which are (possibly inverted) group
-- elements.
type GWord a = [GElem a]

-- | An element, when appearing in a word, may appear either "as-is",
-- or inverted.
data GElem a = E a | I a              deriving (Eq)

instance Show a => Show (GElem a) where
  show (E a) = show a
  show (I a) = show a ++ "\'"

-- | Returns the order of a group.
order :: Group a -> Int
order (Group o _ _) = o

-- | The generators of a group
gens :: Group a -> [a]
gens (Group _ g _) = g

-- | The list of words that make up the presentation of a group
pres :: Group a -> Pres a
pres (Group _ _ p) = p

-- | D_n
-- The dihedral group D_n has order 2*n and is generated by two elements
-- x and y (here E 1 and E 2), subject to three relations:
-- x^n = 1
-- y^2 = 1
-- xyxy = 1 (alternatively yx = x'y)
dihedral :: Int -> Group Int
dihedral n = Group (2 * n) elems prs
  where elems = [1 .. (2 * n)]
        prs = [xn,y2,xyxy]
          where xn = replicate n x
                y2 = [y,y]
                xyxy = [x,y,x,y]
                x = E 1
                y = E 2
